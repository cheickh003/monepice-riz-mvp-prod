/**
 * CinetPay Payment Service for MonEpice&Riz
 * 
 * This module provides TypeScript interfaces and configuration for CinetPay
 * payment integration. CinetPay is a popular payment gateway in Côte d'Ivoire
 * that supports Mobile Money (Orange Money, MTN, Moov, Wave) and card payments.
 * 
 * Note: This is a stub implementation for Phase 0 setup. Actual payment
 * processing logic will be implemented in later phases.
 * 
 * @see https://docs.cinetpay.com/
 * @fileoverview CinetPay service interfaces and configuration
 */

import { env, getCinetPayConfig } from '@/lib/config/environment';

/**
 * CinetPay API endpoints
 */
export const CINETPAY_ENDPOINTS = {
  SANDBOX: 'https://api-checkout.test.cinetpay.com/v2',
  PRODUCTION: 'https://api-checkout.cinetpay.com/v2',
} as const;

/**
 * Supported payment channels in Côte d'Ivoire
 */
export enum PaymentChannel {
  ALL = 'ALL',
  MOBILE_MONEY = 'MOBILE_MONEY', 
  CREDIT_CARD = 'CREDIT_CARD',
  ORANGE_MONEY = 'ORANGE_MONEY',
  MTN_MOBILE_MONEY = 'MTN_MOBILE_MONEY',
  MOOV_MONEY = 'MOOV_MONEY', 
  WAVE = 'WAVE',
}

/**
 * Mobile Money operators in Côte d'Ivoire
 */
export const MOBILE_MONEY_OPERATORS = {
  ORANGE: {
    code: 'OM',
    name: 'Orange Money',
    channel: PaymentChannel.ORANGE_MONEY,
    logo: '/images/payment/orange-money.png',
    color: '#FF7900',
  },
  MTN: {
    code: 'MOMO',
    name: 'MTN Mobile Money',
    channel: PaymentChannel.MTN_MOBILE_MONEY,
    logo: '/images/payment/mtn-momo.png',
    color: '#FFD700',
  },
  MOOV: {
    code: 'MOOV',
    name: 'Moov Money',
    channel: PaymentChannel.MOOV_MONEY,
    logo: '/images/payment/moov-money.png',
    color: '#00A651',
  },
  WAVE: {
    code: 'WAVE',
    name: 'Wave',
    channel: PaymentChannel.WAVE,
    logo: '/images/payment/wave.png',
    color: '#6C5CE7',
  },
} as const;

/**
 * Payment transaction status from CinetPay
 */
export enum PaymentStatus {
  PENDING = 'PENDING',
  SUCCESS = '00', // CinetPay success code
  FAILED = '01',  // CinetPay failure code
  CANCELLED = 'CANCELLED',
  EXPIRED = 'EXPIRED',
}

/**
 * CinetPay configuration interface
 */
export interface CinetPayConfig {
  /** API key from CinetPay dashboard */
  apiKey: string;
  
  /** Site ID from CinetPay dashboard */
  siteId: string;
  
  /** Secret key for webhook signature verification */
  secretKey: string;
  
  /** Base API URL (sandbox or production) */
  baseUrl: string;
  
  /** Webhook notification URL */
  notifyUrl: string;
  
  /** Success return URL */
  returnUrl: string;
  
  /** Cancel/failure return URL */
  cancelUrl: string;
  
  /** Environment flag */
  isProduction: boolean;
}

/**
 * Customer information for CinetPay
 */
export interface CinetPayCustomer {
  /** Customer full name */
  name: string;
  
  /** Customer email (optional but recommended) */
  email?: string;
  
  /** Customer phone number in international format */
  phone: string;
  
  /** Customer address */
  address?: string;
  
  /** Customer city */
  city?: string;
  
  /** Customer country code (CI for Côte d'Ivoire) */
  country?: string;
  
  /** Postal code */
  zipCode?: string;
}

/**
 * Payment request interface for CinetPay
 */
export interface PaymentRequest {
  /** Unique transaction ID (generated by merchant) */
  transactionId: string;
  
  /** Payment amount in XOF (CFA Francs) */
  amount: number;
  
  /** Currency code (XOF for West Africa) */
  currency: 'XOF';
  
  /** Payment description */
  description: string;
  
  /** Customer information */
  customer: CinetPayCustomer;
  
  /** Payment channels to allow */
  channels: PaymentChannel[];
  
  /** Custom metadata (e.g., order ID) */
  metadata?: Record<string, any>;
  
  /** Notification webhook URL (optional override) */
  notifyUrl?: string;
  
  /** Success return URL (optional override) */
  returnUrl?: string;
  
  /** Cancel return URL (optional override) */
  cancelUrl?: string;
}

/**
 * Payment initialization response from CinetPay
 */
export interface PaymentResponse {
  /** Response status code */
  code: string;
  
  /** Response message */
  message: string;
  
  /** Payment data */
  data: {
    /** Payment token for frontend integration */
    payment_token: string;
    
    /** Payment URL for redirection */
    payment_url: string;
    
    /** Transaction ID */
    transaction_id: string;
  };
}

/**
 * Webhook notification payload from CinetPay
 */
export interface WebhookPayload {
  /** Transaction ID */
  cpm_trans_id: string;
  
  /** Site ID */
  cpm_site_id: string;
  
  /** Transaction status */
  cpm_trans_status: string;
  
  /** Transaction amount */
  cpm_amount: string;
  
  /** Currency */
  cmp_currency: string;
  
  /** Payment method used */
  payment_method?: string;
  
  /** Customer phone number */
  cel_phone_num?: string;
  
  /** Phone prefix */
  cpm_phone_prefixe?: string;
  
  /** Payment ID from CinetPay */
  cpm_payid?: string;
  
  /** Custom data sent with initial request */
  cpm_custom?: string;
  
  /** Signature for verification */
  signature: string;
}

/**
 * Payment verification response
 */
export interface PaymentVerification {
  /** Verification success */
  success: boolean;
  
  /** Transaction status */
  status: PaymentStatus;
  
  /** Transaction amount */
  amount: number;
  
  /** Payment method used */
  paymentMethod?: string;
  
  /** Payment date */
  paymentDate?: string;
  
  /** Error message if verification failed */
  error?: string;
}

/**
 * Payment error interface
 */
export interface PaymentError {
  /** Error code */
  code: string;
  
  /** Error message */
  message: string;
  
  /** Additional error details */
  details?: any;
}

/**
 * Get CinetPay configuration based on environment
 */
export function getCinetPayConfiguration(): CinetPayConfig {
  const config = getCinetPayConfig();
  
  return {
    apiKey: config.apiKey,
    siteId: config.siteId,
    secretKey: config.secretKey,
    baseUrl: config.isProduction ? CINETPAY_ENDPOINTS.PRODUCTION : CINETPAY_ENDPOINTS.SANDBOX,
    notifyUrl: config.notifyUrl,
    returnUrl: config.returnUrl,
    cancelUrl: config.cancelUrl,
    isProduction: config.isProduction,
  };
}

/**
 * Validate payment amount according to CinetPay requirements
 */
export function validatePaymentAmount(amount: number): { isValid: boolean; error?: string } {
  // Minimum amount: 100 XOF
  if (amount < 100) {
    return {
      isValid: false,
      error: 'Le montant minimum est de 100 FCFA',
    };
  }
  
  // Maximum amount: 10,000,000 XOF (10 million)
  if (amount > 10_000_000) {
    return {
      isValid: false,
      error: 'Le montant maximum est de 10,000,000 FCFA',
    };
  }
  
  // Amount should be rounded to nearest 5 FCFA
  if (amount % 5 !== 0) {
    return {
      isValid: false,
      error: 'Le montant doit être un multiple de 5 FCFA',
    };
  }
  
  return { isValid: true };
}

/**
 * Format phone number for CinetPay (Côte d'Ivoire format)
 */
export function formatPhoneNumber(phone: string): string {
  // Remove all non-digit characters
  const cleaned = phone.replace(/\D/g, '');
  
  // Handle different input formats
  if (cleaned.startsWith('225')) {
    // Already has country code
    return `+${cleaned}`;
  } else if (cleaned.startsWith('0')) {
    // Local format starting with 0
    return `+225${cleaned.slice(1)}`;
  } else if (cleaned.length === 8) {
    // 8-digit local number
    return `+225${cleaned}`;
  }
  
  // Return as-is if format is unclear
  return phone;
}

/**
 * Generate unique transaction ID
 */
export function generateTransactionId(prefix: string = 'MEPR'): string {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substr(2, 5).toUpperCase();
  return `${prefix}_${timestamp}_${random}`;
}

/**
 * Calculate payment fees (placeholder - actual fees depend on CinetPay configuration)
 */
export function calculatePaymentFees(amount: number, channel: PaymentChannel): number {
  // These are example fee structures - actual fees should be configured
  // based on your CinetPay merchant agreement
  
  switch (channel) {
    case PaymentChannel.MOBILE_MONEY:
      // Mobile money fees are usually a percentage + fixed fee
      return Math.min(Math.max(amount * 0.02, 100), 1000); // 2% with min 100, max 1000
    
    case PaymentChannel.CREDIT_CARD:
      // Card fees are typically higher
      return Math.min(Math.max(amount * 0.035, 150), 2000); // 3.5% with min 150, max 2000
    
    default:
      return 0;
  }
}

/**
 * Get payment method display information
 */
export function getPaymentMethodInfo(paymentMethod: string) {
  const method = Object.values(MOBILE_MONEY_OPERATORS).find(
    op => op.code === paymentMethod || op.name === paymentMethod
  );
  
  return method || {
    code: paymentMethod,
    name: paymentMethod,
    logo: '/images/payment/default.png',
    color: '#6B7280',
  };
}

/**
 * Validate webhook signature (placeholder for actual implementation)
 */
export function validateWebhookSignature(payload: WebhookPayload): boolean {
  // TODO: Implement actual signature validation
  // This should use HMAC-SHA256 with the secret key
  console.warn('Webhook signature validation not yet implemented');
  return true;
}

/**
 * Payment service class (stub for future implementation)
 */
export class CinetPayService {
  private config: CinetPayConfig;
  
  constructor(config?: Partial<CinetPayConfig>) {
    this.config = {
      ...getCinetPayConfiguration(),
      ...config,
    };
  }
  
  /**
   * Initialize a payment (to be implemented)
   */
  async initializePayment(request: PaymentRequest): Promise<PaymentResponse> {
    // TODO: Implement actual payment initialization
    throw new Error('Payment initialization not yet implemented');
  }
  
  /**
   * Verify a payment (to be implemented)
   */
  async verifyPayment(transactionId: string): Promise<PaymentVerification> {
    // TODO: Implement actual payment verification
    throw new Error('Payment verification not yet implemented');
  }
  
  /**
   * Handle webhook notification (to be implemented)
   */
  async handleWebhook(payload: WebhookPayload): Promise<boolean> {
    // TODO: Implement actual webhook handling
    throw new Error('Webhook handling not yet implemented');
  }
}

/**
 * Default CinetPay service instance
 */
export const cinetpayService = new CinetPayService();

/**
 * Type guards
 */
export const isValidPaymentChannel = (channel: string): channel is PaymentChannel => {
  return Object.values(PaymentChannel).includes(channel as PaymentChannel);
};

export const isSuccessfulPayment = (status: string): boolean => {
  return status === PaymentStatus.SUCCESS;
};

/**
 * Constants for the Côte d'Ivoire market
 */
export const CI_PAYMENT_CONSTANTS = {
  CURRENCY: 'XOF',
  COUNTRY_CODE: 'CI',
  PHONE_PREFIX: '+225',
  MIN_AMOUNT: 100,
  MAX_AMOUNT: 10_000_000,
  AMOUNT_STEP: 5,
} as const;

/**
 * Export types for external use
 */
export type {
  CinetPayConfig,
  CinetPayCustomer,
  PaymentRequest,
  PaymentResponse,
  WebhookPayload,
  PaymentVerification,
  PaymentError,
};