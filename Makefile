# Makefile pour MonEpiceRiz - Medusa.js Integration
.PHONY: help install dev build start stop clean migrate-data logs

# Configuration
COMPOSE_FILE = docker-compose.yml
PROJECT_NAME = monepiceriz

# Couleurs pour l'affichage
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[0;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

help: ## Afficher cette aide
	@echo "$(GREEN)MonEpiceRiz - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(BLUE)%-20s$(NC) %s\n", $$1, $$2}'

install: ## Installer les d√©pendances et initialiser le projet
	@echo "$(YELLOW)üì¶ Installation des d√©pendances...$(NC)"
	@echo "$(BLUE)Frontend Next.js:$(NC)"
	cd frontend && npm install
	@echo "$(BLUE)Backend Medusa:$(NC)"
	cd backend && npm install
	@echo "$(GREEN)‚úÖ Installation termin√©e!$(NC)"

init-medusa: ## Initialiser un nouveau projet Medusa dans le dossier backend
	@echo "$(YELLOW)üöÄ Initialisation de Medusa.js...$(NC)"
	@if [ ! -d "backend/src" ]; then \
		cd backend && npx @medusajs/medusa-cli new . --skip-db; \
		echo "$(GREEN)‚úÖ Medusa initialis√©!$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Medusa d√©j√† initialis√©$(NC)"; \
	fi

dev: ## D√©marrer l'environnement de d√©veloppement
	@echo "$(YELLOW)üöÄ D√©marrage de l'environnement de d√©veloppement...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d postgres redis minio
	@echo "$(BLUE)‚è≥ Attente des services de base...$(NC)"
	sleep 10
	docker-compose -f $(COMPOSE_FILE) up medusa_backend frontend
	@echo "$(GREEN)‚úÖ Environnement de d√©veloppement d√©marr√©!$(NC)"
	@echo "$(BLUE)Frontend: http://localhost:3000$(NC)"
	@echo "$(BLUE)Backend API: http://localhost:9000$(NC)"
	@echo "$(BLUE)Medusa Admin: http://localhost:7001$(NC)"

build: ## Construire les images Docker
	@echo "$(YELLOW)üî® Construction des images Docker...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build
	@echo "$(GREEN)‚úÖ Images construites!$(NC)"

start: ## D√©marrer tous les services en arri√®re-plan
	@echo "$(YELLOW)üöÄ D√©marrage de tous les services...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s!$(NC)"
	@make status

stop: ## Arr√™ter tous les services
	@echo "$(YELLOW)üõë Arr√™t des services...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s!$(NC)"

restart: ## Red√©marrer tous les services
	@echo "$(YELLOW)üîÑ Red√©marrage des services...$(NC)"
	@make stop
	@make start

status: ## Afficher le statut des services
	@echo "$(BLUE)üìä Statut des services:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps

logs: ## Afficher les logs de tous les services
	docker-compose -f $(COMPOSE_FILE) logs -f

logs-backend: ## Afficher les logs du backend Medusa
	docker-compose -f $(COMPOSE_FILE) logs -f medusa_backend

logs-frontend: ## Afficher les logs du frontend Next.js
	docker-compose -f $(COMPOSE_FILE) logs -f frontend

logs-db: ## Afficher les logs de PostgreSQL
	docker-compose -f $(COMPOSE_FILE) logs -f postgres

clean: ## Nettoyer les containers et volumes
	@echo "$(RED)üßπ Nettoyage des containers et volumes...$(NC)"
	@read -p "√ätes-vous s√ªr de vouloir supprimer tous les volumes? (y/N): " confirm && \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		docker-compose -f $(COMPOSE_FILE) down -v; \
		docker system prune -f; \
		echo "$(GREEN)‚úÖ Nettoyage termin√©!$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Nettoyage annul√©$(NC)"; \
	fi

migrate-dry: ## Tester la migration des donn√©es (dry run)
	@echo "$(YELLOW)üß™ Test de migration des donn√©es...$(NC)"
	cd scripts && node migrate-data.js --dry-run
	@echo "$(GREEN)‚úÖ Test de migration termin√©!$(NC)"

migrate-data: ## Migrer les donn√©es existantes vers Medusa
	@echo "$(YELLOW)üìä Migration des donn√©es vers Medusa...$(NC)"
	@read -p "√ätes-vous s√ªr de vouloir migrer les donn√©es? (y/N): " confirm && \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		cd scripts && node migrate-data.js; \
		echo "$(GREEN)‚úÖ Migration termin√©e!$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Migration annul√©e$(NC)"; \
	fi

migrate-categories: ## Migrer uniquement les cat√©gories
	@echo "$(YELLOW)üìÇ Migration des cat√©gories...$(NC)"
	cd scripts && node migrate-data.js --type=categories

migrate-products: ## Migrer uniquement les produits
	@echo "$(YELLOW)üì¶ Migration des produits...$(NC)"
	cd scripts && node migrate-data.js --type=products

db-shell: ## Acc√©der au shell PostgreSQL
	@echo "$(BLUE)üêò Connexion √† PostgreSQL...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec postgres psql -U medusa_user -d medusa_db

db-backup: ## Sauvegarder la base de donn√©es
	@echo "$(YELLOW)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	mkdir -p backups
	docker-compose -f $(COMPOSE_FILE) exec postgres pg_dump -U medusa_user medusa_db > backups/backup-$(shell date +%Y%m%d-%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans le dossier backups/$(NC)"

db-restore: ## Restaurer la base de donn√©es (sp√©cifier BACKUP_FILE=filename)
	@echo "$(YELLOW)üîÑ Restauration de la base de donn√©es...$(NC)"
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "$(RED)‚ùå Sp√©cifiez le fichier: make db-restore BACKUP_FILE=backup.sql$(NC)"; \
		exit 1; \
	fi
	docker-compose -f $(COMPOSE_FILE) exec -T postgres psql -U medusa_user -d medusa_db < $(BACKUP_FILE)
	@echo "$(GREEN)‚úÖ Restauration termin√©e!$(NC)"

seed-dev: ## Ins√©rer des donn√©es de test
	@echo "$(YELLOW)üå± Insertion des donn√©es de test...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec medusa_backend npm run seed
	@echo "$(GREEN)‚úÖ Donn√©es de test ins√©r√©es!$(NC)"

admin-user: ## Cr√©er un utilisateur admin
	@echo "$(YELLOW)üë§ Cr√©ation d'un utilisateur admin...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec medusa_backend npx medusa user -e admin@monepiceriz.com -p password123
	@echo "$(GREEN)‚úÖ Utilisateur admin cr√©√©! Email: admin@monepiceriz.com, Password: password123$(NC)"

prod-build: ## Construire pour la production
	@echo "$(YELLOW)üè≠ Construction pour la production...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build --target production
	@echo "$(GREEN)‚úÖ Images de production construites!$(NC)"

test: ## Ex√©cuter les tests
	@echo "$(YELLOW)üß™ Ex√©cution des tests...$(NC)"
	cd frontend && npm test
	cd backend && npm test
	@echo "$(GREEN)‚úÖ Tests termin√©s!$(NC)"

lint: ## V√©rifier le code (linting)
	@echo "$(YELLOW)üîç V√©rification du code...$(NC)"
	cd frontend && npm run lint
	cd backend && npm run lint
	@echo "$(GREEN)‚úÖ V√©rification termin√©e!$(NC)"

health: ## V√©rifier la sant√© des services
	@echo "$(BLUE)üè• V√©rification de la sant√© des services:$(NC)"
	@echo "$(YELLOW)Frontend:$(NC)"
	@curl -f http://localhost:3000/api/health || echo "$(RED)‚ùå Frontend non accessible$(NC)"
	@echo "$(YELLOW)Backend API:$(NC)"
	@curl -f http://localhost:9000/health || echo "$(RED)‚ùå Backend non accessible$(NC)"
	@echo "$(YELLOW)Admin:$(NC)"
	@curl -f http://localhost:7001 || echo "$(RED)‚ùå Admin non accessible$(NC)"

setup: ## Configuration initiale compl√®te du projet
	@echo "$(GREEN)üéØ Configuration initiale de MonEpiceRiz$(NC)"
	@make install
	@make init-medusa
	@make build
	@make start
	@echo "$(BLUE)‚è≥ Attente du d√©marrage des services...$(NC)"
	@sleep 30
	@make migrate-dry
	@echo "$(GREEN)üéâ Configuration termin√©e!$(NC)"
	@echo "$(BLUE)Prochaines √©tapes:$(NC)"
	@echo "  1. Ex√©cuter: make migrate-data"
	@echo "  2. Cr√©er un admin: make admin-user"
	@echo "  3. Acc√©der √† http://localhost:3000"

deploy: ## D√©ployer en production (√† personnaliser)
	@echo "$(RED)üö® Commande de d√©ploiement √† personnaliser selon votre infrastructure$(NC)"
	@echo "$(YELLOW)Suggestions:$(NC)"
	@echo "  - Docker Swarm: docker stack deploy"
	@echo "  - Kubernetes: kubectl apply"
	@echo "  - VPS: rsync + docker-compose"

monitoring: ## Afficher les m√©triques de monitoring
	@echo "$(BLUE)üìä M√©triques des containers:$(NC)"
	@docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"