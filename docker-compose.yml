version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: monepiceriz_postgres
    environment:
      - POSTGRES_USER=medusa_user
      - POSTGRES_PASSWORD=medusa_password
      - POSTGRES_DB=medusa_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monepiceriz_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medusa_user -d medusa_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: monepiceriz_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monepiceriz_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Medusa.js Backend
  medusa_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: monepiceriz_backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://medusa_user:medusa_password@postgres:5432/medusa_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=supersecret_jwt_secret_change_in_prod
      - COOKIE_SECRET=supersecret_cookie_secret_change_in_prod
      - MEDUSA_ADMIN_CORS=http://localhost:7001,http://localhost:3000
      - STORE_CORS=http://localhost:3000,http://localhost:3001
    ports:
      - "9000:9000"  # API Medusa
      - "7001:7001"  # Admin Medusa
    volumes:
      - ./backend:/app
      - /app/node_modules
      - medusa_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - monepiceriz_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: monepiceriz_frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_MEDUSA_BACKEND_URL=http://localhost:9000
      - NEXT_PUBLIC_BASE_URL=http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - medusa_backend
    networks:
      - monepiceriz_network

  # MinIO pour le stockage des fichiers (optionnel, alternative à AWS S3)
  minio:
    image: minio/minio:latest
    container_name: monepiceriz_minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    ports:
      - "9001:9000"  # API MinIO
      - "9002:9001"  # Console MinIO
    volumes:
      - minio_data:/data
    networks:
      - monepiceriz_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  medusa_uploads:
  minio_data:

networks:
  monepiceriz_network:
    driver: bridge